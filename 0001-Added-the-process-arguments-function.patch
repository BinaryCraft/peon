From adefcaad448baa4faaf485ffa846c074d6ced5b4 Mon Sep 17 00:00:00 2001
From: Marthinus Engelbrecht <mj.engelbrecht@gmail.com>
Date: Thu, 31 Mar 2016 12:21:00 +0200
Subject: [PATCH] Added the process arguments function

---
 .jshintrc                        |  3 +-
 source/cli.js                    |  3 +-
 source/constants/errorTypes.js   |  1 +
 source/processArguments.js       | 29 ++++++++++++++++++
 test/cliUnitTest.js              | 11 +++++--
 test/processArgumentsUnitTest.js | 65 ++++++++++++++++++++++++++++++++++++++++
 6 files changed, 107 insertions(+), 5 deletions(-)
 create mode 100644 source/constants/errorTypes.js
 create mode 100644 source/processArguments.js
 create mode 100644 test/processArgumentsUnitTest.js

diff --git a/.jshintrc b/.jshintrc
index 7cb6842..af4a252 100644
--- a/.jshintrc
+++ b/.jshintrc
@@ -35,6 +35,7 @@
     "describe": false,
     "afterEach": false,
     "jasmine": false,
-    "expect": false
+    "expect": false,
+    "fit":false
   }
 }
diff --git a/source/cli.js b/source/cli.js
index a8127af..28a7665 100644
--- a/source/cli.js
+++ b/source/cli.js
@@ -1,3 +1,4 @@
-export default function cli(executeGenerator) {
+export default function cli(processArguments, executeGenerator) {
+    processArguments();
     executeGenerator();
 }
diff --git a/source/constants/errorTypes.js b/source/constants/errorTypes.js
new file mode 100644
index 0000000..b66b2a1
--- /dev/null
+++ b/source/constants/errorTypes.js
@@ -0,0 +1 @@
+export const INVALID_COMMAND = 'InvalidCommand';
\ No newline at end of file
diff --git a/source/processArguments.js b/source/processArguments.js
new file mode 100644
index 0000000..932606b
--- /dev/null
+++ b/source/processArguments.js
@@ -0,0 +1,29 @@
+import parseArgs from 'minimist';
+import * as ErrorTypes from '../source/constants/errorTypes';
+
+function objectToKeyValuePairArry(obj) {
+    let array = [];
+    for (var key in obj) {
+        if (obj.hasOwnProperty(key)) {
+            var keyValuePair = [ key, obj[ key ] ];
+            array.push(keyValuePair);
+        }
+    }
+}
+
+export default function processArguments(args) {
+    const normalizedArgs = args.slice(2);
+    if (normalizedArgs[ 0 ] === 'run') {
+        let parsedArgs = parseArgs(normalizedArgs.slice(1));
+        const path = parsedArgs._[ 0 ];
+        delete parsedArgs._;
+        const keyValuePairArray = objectToKeyValuePairArry(parsedArgs);
+        const options = new Map(keyValuePairArray);
+        return { path, options };
+    } else {
+        throw {
+            name: ErrorTypes.INVALID_COMMAND,
+            message: `'${normalizedArgs[0]}' is not a valid command`
+        };
+    }
+}
\ No newline at end of file
diff --git a/test/cliUnitTest.js b/test/cliUnitTest.js
index b0e43ff..ca37414 100644
--- a/test/cliUnitTest.js
+++ b/test/cliUnitTest.js
@@ -1,11 +1,16 @@
 import cli from '../source/cli';
 
 describe(`Given the cli command is loaded`, function() {
-    describe(`when the it's executed`, function() {
-        let executeGenerator;
+    describe(`when it's executed`, function() {
+        let executeGenerator, processArguments;
         beforeEach(function() {
             executeGenerator = jasmine.createSpy('executeGenerator');
-            cli(executeGenerator);
+            processArguments = jasmine.createSpy('processArguments');
+            cli(processArguments, executeGenerator);
+        });
+
+        it(`it should process the commandline arguments`, function() {
+            expect(processArguments).toHaveBeenCalled();
         });
 
         it(`it should execute the generator`, function() {
diff --git a/test/processArgumentsUnitTest.js b/test/processArgumentsUnitTest.js
new file mode 100644
index 0000000..ae33b61
--- /dev/null
+++ b/test/processArgumentsUnitTest.js
@@ -0,0 +1,65 @@
+import processArguments from '../source/processArguments';
+import * as ErrorTypes from '../source/constants/errorTypes';
+
+describe(`Given the processArguments function is executed with arguments and help text`, function() {
+    let args, result, expectedResult;
+
+    describe(`with 'run' at position 3rd position`, function() {
+        let generatorPath = '/generatorPath';
+
+        beforeEach(function() {
+            args = [ '/Users/Marthinus/.nvm/versions/node/v5.9.0/bin/node',
+                '/Users/Marthinus/.nvm/versions/node/v5.9.0/bin/peon',
+                'run',
+                generatorPath,
+                '--argument1',
+                'value1',
+                '--argument2',
+                'value2',
+                '--argument3',
+                '--argument4',
+                'value4' ];
+            result = processArguments(args);
+        });
+
+        it(`it should return the options and the path to the generator`, function() {
+
+            let optionsMap = new Map([
+                [ 'argument1', 'value1' ],
+                [ 'argument2', 'value2' ],
+                [ 'argument3', 'true' ],
+                [ 'argument4', 'value4' ]
+            ]);
+
+            expectedResult = {
+                path: generatorPath,
+                options: optionsMap
+            };
+
+            expect(result).toEqual(expectedResult);
+        });
+
+    });
+
+    describe(`with 'run' not at the 3rd position`, function() {
+        args = [ '/Users/Marthinus/.nvm/versions/node/v5.9.0/bin/node',
+            '/Users/Marthinus/.nvm/versions/node/v5.9.0/bin/peon',
+            '--argument1',
+            'value1',
+            '--argument2',
+            'value2',
+            '--argument3',
+            '--argument4',
+            'value4' ];
+
+        const error = {
+            name: ErrorTypes.INVALID_COMMAND,
+            message: `'${args[2]}' is not a valid command`
+        };
+
+        it(`it should throw an error`, function() {
+            expect(processArguments.bind(this, args)).toThrow(error);
+        });
+    });
+});
+
-- 
2.5.4 (Apple Git-61)

